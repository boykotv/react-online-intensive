{"remainingRequest":"/home/akartamyshev/Work/TiTanya/React - my - Facebook/react-online-intensive/node_modules/babel-loader/lib/index.js??ref--4-1!/home/akartamyshev/Work/TiTanya/React - my - Facebook/react-online-intensive/source/components/Feed/index.js","dependencies":[{"path":"/home/akartamyshev/Work/TiTanya/React - my - Facebook/react-online-intensive/source/components/Feed/index.js","mtime":1543780009354},{"path":"/home/akartamyshev/Work/TiTanya/React - my - Facebook/react-online-intensive/.babelrc.js","mtime":1543190808333},{"path":"/home/akartamyshev/Work/TiTanya/React - my - Facebook/react-online-intensive/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/akartamyshev/Work/TiTanya/React - my - Facebook/react-online-intensive/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var _class;(function(){var enterModule=require('react-hot-loader').enterModule;enterModule&&enterModule(module);})();function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}// Core\nimport React,{Component}from'react';//Components\nimport{withProfile}from'components/HOC/withProfile';import StatusBar from'components/StatusBar';import Composer from'components/Composer';import Post from'components/Post';import Spinner from'components/Spinner';import Catcher from'../Catcher';//Instruments\nimport Styles from'./styles.m.css';import{api,TOKEN,GROUP_ID}from'config/api';import{socket}from'socket/init';let Feed=withProfile(_class=class Feed extends Component{constructor(...args){super(...args);this.state={posts:[],isPostFetching:false};this._setPostsFetchingState=state=>{this.setState({isPostFetching:state});};this._fetchPosts=async()=>{this._setPostsFetchingState(true);const response=await fetch(api,{method:'GET'});const{data:posts}=await response.json();this.setState({posts,isPostFetching:false});};this._createPost=async comment=>{this._setPostsFetchingState(true);const response=await fetch(api,{method:'POST',headers:{'Content-Type':'application/json',Authorization:TOKEN},body:JSON.stringify({comment})});const{data:post}=await response.json();this.setState(({posts})=>({posts:[post,...posts],isPostFetching:false}));};this._likePost=async id=>{this._setPostsFetchingState(true);const response=await fetch(`${api}/${id}`,{method:'PUT',headers:{Authorization:TOKEN}});const{data:likedPost}=await response.json();this.setState(({posts})=>({posts:posts.map(post=>post.id===likedPost.id?likedPost:post),isPostFetching:false}));};this._removePost=async id=>{const{posts}=this.state;this._setPostsFetchingState(true);await fetch(`${api}/${id}`,{method:'DELETE',headers:{Authorization:TOKEN}});this.setState({posts:posts.filter(post=>post.id!==id),isPostFetching:false});};}componentDidMount(){const{currentUserFirstName,currentUserLastName}=this.props;this._fetchPosts();socket.emit('join',GROUP_ID);socket.on('create',postJSON=>{const{data:createdPost,meta}=JSON.parse(postJSON);if(`${currentUserFirstName} ${currentUserLastName}`!==`${meta.authorFirstName} ${meta.authorLastName}`){this.setState(({posts})=>({posts:[createdPost,...posts]}));}});socket.on('remove',postJSON=>{const{data:removedPost,meta}=JSON.parse(postJSON);if(`${currentUserFirstName} ${currentUserLastName}`!==`${meta.authorFirstName} ${meta.authorLastName}`){this.setState(({posts})=>({posts:posts.filter(post=>post.id!==removedPost.id)}));}});socket.on('like',postJSON=>{const{data:likedPost,meta}=JSON.parse(postJSON);if(`${currentUserFirstName} ${currentUserLastName}`!==`${meta.authorFirstName} ${meta.authorLastName}`){this.setState(({posts})=>({posts:posts.map(post=>post.id===likedPost.id?likedPost:post)}));}});}componentWillUnmount(){socket.removeListener('create');socket.removeListener('remove');socket.removeListener('like');}render(){const{posts,isPostFetching}=this.state;const postsJSX=posts.map(post=>{return React.createElement(Catcher,{key:post.id},React.createElement(Post,_extends({},post,{_likePost:this._likePost,_removePost:this._removePost})));});return React.createElement(\"section\",{className:Styles.feed},React.createElement(Spinner,{isSpinning:isPostFetching}),React.createElement(StatusBar,null),React.createElement(Composer,{_createPost:this._createPost}),postsJSX);}// @ts-ignore\n__reactstandin__regenerateByEval(key,code){// @ts-ignore\nthis[key]=eval(code);}})||_class;export{Feed as default};;(function(){var reactHotLoader=require('react-hot-loader').default;var leaveModule=require('react-hot-loader').leaveModule;if(!reactHotLoader){return;}reactHotLoader.register(Feed,\"Feed\",\"/home/akartamyshev/Work/TiTanya/React - my - Facebook/react-online-intensive/source/components/Feed/index.js\");leaveModule(module);})();;",{"version":3,"sources":["/home/akartamyshev/Work/TiTanya/React - my - Facebook/react-online-intensive/source/components/Feed/index.js"],"names":["React","Component","withProfile","StatusBar","Composer","Post","Spinner","Catcher","Styles","api","TOKEN","GROUP_ID","socket","Feed","state","posts","isPostFetching","_setPostsFetchingState","setState","_fetchPosts","response","fetch","method","data","json","_createPost","comment","headers","Authorization","body","JSON","stringify","post","_likePost","id","likedPost","map","_removePost","filter","componentDidMount","currentUserFirstName","currentUserLastName","props","emit","on","postJSON","createdPost","meta","parse","authorFirstName","authorLastName","removedPost","componentWillUnmount","removeListener","render","postsJSX","feed"],"mappings":"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","sourcesContent":["// Core\nimport React, { Component } from 'react';\n\n//Components\nimport { withProfile } from 'components/HOC/withProfile';\nimport StatusBar from 'components/StatusBar';\nimport Composer from 'components/Composer';\nimport Post from 'components/Post';\nimport Spinner from 'components/Spinner'; \nimport Catcher from '../Catcher';\n\n//Instruments\nimport Styles from './styles.m.css';\nimport { api, TOKEN, GROUP_ID } from 'config/api';\nimport { socket } from 'socket/init';\n\n@withProfile\nexport default class Feed extends Component {\n    state = {\n        posts:          [],\n        isPostFetching: false,\n    }\n    \n    componentDidMount() {\n        const {currentUserFirstName, currentUserLastName} = this.props;\n\n        this._fetchPosts();\n\n        socket.emit('join', GROUP_ID);\n\n        socket.on('create', (postJSON) => {\n            const { data: createdPost, meta } = JSON.parse(postJSON);\n            \n            if (\n                `${currentUserFirstName} ${currentUserLastName}` !==\n                `${meta.authorFirstName} ${meta.authorLastName}` \n            ) \n            {\n                this.setState(({ posts }) => ({\n                    posts: [createdPost, ...posts],\n                }));\n            }\n        });\n\n        socket.on('remove', (postJSON) => {\n            const { data: removedPost, meta } = JSON.parse(postJSON);\n            \n            if (\n                `${currentUserFirstName} ${currentUserLastName}` !==\n                `${meta.authorFirstName} ${meta.authorLastName}` \n            ) {\n                this.setState(({ posts }) => ({\n                    posts: posts.filter((post) => post.id !== removedPost.id),\n                }));\n            }\n        });\n\n        socket.on('like', (postJSON) => {\n            const { data: likedPost, meta } = JSON.parse(postJSON);\n            \n            if (\n                `${currentUserFirstName} ${currentUserLastName}` !==\n                `${meta.authorFirstName} ${meta.authorLastName}` \n            ) \n            {\n                this.setState(({ posts }) => ({\n                    posts:posts.map((post) => post.id === likedPost.id ? likedPost : post),\n                }));\n            }\n        });\n    }\n\n    componentWillUnmount () {\n        socket.removeListener('create');\n        socket.removeListener('remove');\n        socket.removeListener('like');\n    }\n\n    _setPostsFetchingState = (state) => {\n        this.setState({\n            isPostFetching: state,\n        })\n    }\n\n    _fetchPosts = async () => {\n        this._setPostsFetchingState(true);\n\n        const response = await fetch(api, {\n            method: 'GET',\n        });\n\n        const { data: posts } = await response.json();\n\n        this.setState({\n            posts,\n            isPostFetching: false,\n        });\n    };\n\n    _createPost = async (comment) => {\n        this._setPostsFetchingState(true);\n\n        const response = await fetch(api, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: TOKEN,\n            },\n            body: JSON.stringify({ comment }),\n        });\n\n        const { data: post } = await response.json();\n\n        this.setState (({ posts }) => ({\n            posts: [post, ...posts],\n            isPostFetching: false,\n        }));\n    }\n\n    _likePost = async (id) => {\n        this._setPostsFetchingState(true);\n\n        const response = await fetch(`${api}/${id}`, {\n            method: 'PUT',\n            headers: {\n                Authorization: TOKEN,\n            },\n        });\n\n        const { data: likedPost} = await response.json();\n\n        this.setState(({ posts }) => ({\n            posts: posts.map((post) => post.id === likedPost.id ? likedPost : post),\n            isPostFetching: false,\n        }));\n    };\n\n    _removePost = async (id) => {\n        const { posts } = this.state;\n        this._setPostsFetchingState(true);\n\n        await fetch(`${api}/${id}`, {\n            method: 'DELETE',\n            headers: {\n                Authorization: TOKEN,\n            },\n        });\n        \n        this.setState({\n            posts:          posts.filter((post) => post.id !== id),\n            isPostFetching: false,\n        })\n    }\n\n    render() {\n        const { posts, isPostFetching } = this.state;\n        const postsJSX = posts.map((post) => {\n            return (\n                <Catcher key = { post.id } >\n                    <Post                         \n                        { ...post } \n                        _likePost = { this._likePost } \n                        _removePost = { this._removePost } \n                    />\n                </Catcher>    \n            );\n        });\n\n        return (\n                <section className = { Styles.feed }>\n                    <Spinner isSpinning = { isPostFetching } />\n                    <StatusBar />\n                    <Composer _createPost = { this._createPost }/>\n                    { postsJSX }\n                </section>            \n        );\n    }\n}"]}]}